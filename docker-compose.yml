services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: credit_bank
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d credit_bank"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - microservices-network

  zoo1:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    volumes:
      - zksingle_zoo1-data:/data
      - zksingle_zoo1-log:/datalog
    networks:
      - microservices-network

  kafka1:
    image: confluentinc/cp-kafka:6.2.1
    hostname: kafka1
    user: "appuser:appuser"
    ports:
      - "9092:9092"
      - "9999:9999"
    restart: unless-stopped
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - zksingle_kafka1-data:/var/lib/kafka/data
    depends_on:
      - zoo1
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka1:19092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - microservices-network

  calculator:
    build:
      context: .
      dockerfile: calculator_microservice/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - microservices-network

  deal:
    build:
      context: .
      dockerfile: deal_microservice/Dockerfile
    depends_on:
      kafka1:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/credit_bank
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:19092
    networks:
      - microservices-network

  statement:
    build:
      context: .
      dockerfile: statement_microservice/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8082:8082"
    restart: unless-stopped
    networks:
      - microservices-network

  dossier:
    build:
      context: .
      dockerfile: dossier_microservice/Dockerfile
    depends_on:
      kafka1:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/credit_bank
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka1:19092
    networks:
      - microservices-network

  gateway:
    build:
      context: .
      dockerfile: API_Gateway_microservice/Dockerfile
    depends_on:
      calculator:
        condition: service_started
      deal:
        condition: service_started
      statement:
        condition: service_started
      dossier:
        condition: service_started
    ports:
      - "8084:8084"
    restart: unless-stopped
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  zksingle_zoo1-data:
  zksingle_zoo1-log:
  zksingle_kafka1-data: